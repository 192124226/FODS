import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor, export_text
from sklearn.metrics import mean_squared_error

# Load the car dataset
car_data = pd.read_csv('car_data.csv')

# Define the features and the target variable
features = ['mileage', 'age', 'brand', 'engine_type']
target = 'price'

# Convert categorical variables to numerical variables
car_data['brand'] = pd.Categorical(car_data['brand']).codes
car_data['engine_type'] = pd.Categorical(car_data['engine_type']).codes

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(car_data[features], car_data[target], test_size=0.2, random_state=42)

# Create a CART regressor model
model = DecisionTreeRegressor(random_state=42)

# Train the model on the training data
model.fit(X_train, y_train)

# Get the predicted price for the new car
def predict_price(mileage, age, brand, engine_type):
    new_car = [[mileage, age, brand, engine_type]]
    predicted_price = model.predict(new_car)
    return predicted_price[0]

# Get the user input for the new car
mileage = float(input("Enter the mileage of the new car: "))
age = float(input("Enter the age of the new car: "))
brand = input("Enter the brand of the new car: ")
engine_type = input("Enter the engine type of the new car: ")

# Convert the user input to the appropriate format
brand_index = car_data['brand'].unique().tolist().index(brand)
engine_type_index = car_data['engine_type'].unique().tolist().index(engine_type)

# Predict the price of the new car
predicted_price = predict_price(mileage, age, brand_index, engine_type_index)

# Display the predicted price and the decision path
print("The predicted price of the new car is: ", predicted_price)
print("The decision path for the new car is: ")
print(export_text(model, feature_names=features))
