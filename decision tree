from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

# Load the Iris dataset
iris = datasets.load_iris()

# Define the features and the target variable
features = ['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']
target = 'species'

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.2, random_state=42)

# Create a Decision Tree classifier model
model = DecisionTreeClassifier()

# Train the model on the training data
model.fit(X_train, y_train)

# Get the predicted species for the new flower
def predict_species(sepal_length, sepal_width, petal_length, petal_width):
    new_flower = [[sepal_length, sepal_width, petal_length, petal_width]]
    predicted_species = model.predict(new_flower)
    return iris.target_names[predicted_species[0]]

# Get the user input for the new flower
sepal_length = float(input("Enter the sepal length (cm) for the new flower: "))
sepal_width = float(input("Enter the sepal width (cm) for the new flower: "))
petal_length = float(input("Enter the petal length (cm) for the new flower: "))
petal_width = float(input("Enter the petal width (cm) for the new flower: "))

# Predict the species of the new flower
predicted_species = predict_species(sepal_length, sepal_width, petal_length, petal_width)

# Display the predicted species
print("The new flower is predicted to be a/an {}.".format(predicted_species))
